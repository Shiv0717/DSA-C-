/ Largest subarray with 0 sum
// https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1
/*
Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.
Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.
*/

// Approach
// We will use concept of prefix sum
// p(r) = sum from 0 to r
// p(l-1) = sum from 0 to l-1
// p(r) = p(l-1) + Sum(l,r)
// if S(l,r) = 0 according to question means p(r) = p(l-1)
// we maintain a unordered_map<int,int> to store <prefixSum, first_occurence_index>
// we maintain a sum variable = 0, longest_length = 0
// we store whole prefix sum in an variable sum = 0 one by one
// we store all prefix_sum and first_occ_index in our map.
// when we get a prefix_sum we check in map if its not present we store it in the map
// if its present, we do that index i - map[that_prefix_sum] i.e map[4] give us first_occ_index for that sum and then we update the longest_length

// TC: O(N)
// SC: O(N)

#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

int maxLen(vector<int> &A, int n)
{
    int sum = 0;
    int longest_length = 0;
    unordered_map<int, int> mpp;
    for (int i = 0; i < A.size(); i++)
    {
        sum += A[i];
        if (sum == 0)
            longest_length = i + 1;
        else
        {

            if (mpp.find(sum) != mpp.end())
            {
                longest_length = max(longest_length, i - mpp[sum]);
            }
            else
            {
                mpp[sum] = i;
            }
        }
    }
    return longest_length;
}