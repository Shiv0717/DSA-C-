/ Longest Consecutive Sequence
// https://leetcode.com/problems/longest-consecutive-sequence/description/
/*
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
You must write an algorithm that runs in O(n) time.
Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
*/

// Logic: https://drive.google.com/file/d/1P-H9HKGWKv_4xWHTUdEH51FT72-60J5z/view?usp=share_link
// Approach
// We will take 2 maps <int,bool> one is present one is checked, one longest_seq variable = 0
// we will store all elements of array inside present as value true
// we will iterate the array again and find whether the nums[i] is starting point of a conseq sequence of or not, to do so we will check if nums[i]-1 is present in present map then its not a starting point
// if its not present then nums[i] is starting point of a conseq sequence and we can store it in checked map
// Now we check whether nums[i]+1 is present in present map if yes, then again add nums[i]+1 in checked map and do this till we have an element which is not present in present map
// so this gives us the condeq sequence now take its length and compare with longest_sequence variable and update the variable now move to next element in nums array and do the same
// At the end return the longest_seq variable

// TC: O(n)
// SC: O(n)

#include <iostream>
#include <unordered_map>
#include <vector>
#include <algorithm>
using namespace std;

int longestConsecutive(vector<int> &nums)
{
    int longest_cons_chain = 0;
    unordered_map<int, bool> present;
    unordered_map<int, bool> checked;
    for (auto a : nums)
    {
        present[a] = true;
    }
    for (int i = 0; i < nums.size(); i++)
    {
        // !checked[nums[i]] means that number should not be part of a conseq sequence made already
        if (!checked[nums[i]] && !present[nums[i] - 1])
        {
            int current_chain = 0;
            int start = nums[i];
            while (present[start])
            {
                current_chain++;
                checked[start] = true;
                start++;
            }
            longest_cons_chain = max(longest_cons_chain, current_chain);
        }
    }
    return longest_cons_chain;
}

int main()
{
    vector<int> nums{100, 4, 200, 1, 3, 2};
    int answer = longestConsecutive(nums);
    cout << "The ans is " << answer << endl;
    return 0;
}